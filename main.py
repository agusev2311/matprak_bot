import telebot
from telebot import types
import sqlite3
import time
import datetime
import sql_return
import sorting_123
import json
import os
from dateutil.relativedelta import relativedelta
from threading import Thread
import prog

print("main.py started")

with open('config.json', 'r') as file:
    config = json.load(file)

sql_return.init_db()
sql_return.init_files_db()

is_polling = True

bot = telebot.TeleBot(config["tg-token"])

@bot.message_handler(commands=["start"])
def start(message):
    user = sql_return.find_user_id(message.from_user.id)
    if user and user[3] == "pending":
        bot.reply_to(message, "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif user and user[3] == "approved":
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f'mm_send')
        button2 = types.InlineKeyboardButton("üîç –ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f'mm_check_0')
        button3 = types.InlineKeyboardButton("üìÉ –í—Å–µ –∫—É—Ä—Å—ã", callback_data=f'mm_courses_0')
        button4 = types.InlineKeyboardButton("üóÇ –í—Å–µ —Ä–µ—à–µ–Ω–∏—è", callback_data=f"mm_answers_0")
        markup.add(button1)
        markup.add(button2)
        markup.add(button3)
        markup.add(button4)
        bot.reply_to(message, f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!""", reply_markup=markup)
    elif user and user[3] == "banned":
        bot.reply_to(message, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    else:
        bot.reply_to(message, f"""–ó–¥—Ä–∞–≤c—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b> (<u>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</u>)\n\n–ü—Ä–∏–º–µ—Ä: "–ê—Ä—Ç—ë–º –ì—É—Å–µ–≤".""", parse_mode="HTML")
        bot.register_next_step_handler(message, register_name)

def register_name(message):
    name = message.text.split()
    if len(name) != 2:
        bot.reply_to(message, f"–í—ã –≤–≤–µ–ª–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∏—Ö —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, register_name)
    else:
        sql_return.reg_user(int(message.from_user.id), name[0], name[1])

        bot.reply_to(message, "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'reg_approve_{message.from_user.id}')
        button2 = types.InlineKeyboardButton("üü° –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reg_deny_{message.from_user.id}')
        button3 = types.InlineKeyboardButton("‚ùå –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f'reg_ban_{message.from_user.id}')
        markup.add(button1)
        markup.add(button2, button3)
        bot.send_message(int(config["admin_id"]), f"@{message.from_user.username} ({message.from_user.id}) —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ {name[0]} {name[1]}", reply_markup=markup)
    sql_return.log_action(message.from_user.id, "register", f"{name[0]} {name[1]}")

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    user = sql_return.find_user_id(call.from_user.id)
    if user and user[3] == "banned":
        bot.answer_callback_query(call.id, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    user_id = call.data.split('_')[-1]
    if call.data.startswith("reg_approve_"):
        sql_return.set_user_status(user_id, "approved")
        bot.send_message(user_id, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏.")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        sql_return.log_action(call.from_user.id, "approve_register", f"{user_id}")
    elif call.data.startswith("reg_deny_"):
        sql_return.delete_user(user_id)
        bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞.")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        sql_return.log_action(call.from_user.id, "deny_register", f"{user_id}")
    elif call.data.startswith("reg_ban_"):
        sql_return.set_user_status(user_id, "banned")
        bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        sql_return.log_action(call.from_user.id, "ban_register", f"{user_id}")
    elif call.data.startswith("mm_send"):
        mm_send(call)
    elif call.data.startswith("mm_check"):
        mm_check(call, int(call.data.split("_")[-1]))
    elif call.data.startswith("mm_courses_"):
        mm_courses(call, int(call.data.split('_')[-1]))
    elif call.data.startswith("mm_answers_"):
        mm_answers(call, int(call.data.split('_')[-1]))
        # all_solutions(call, int(call.data.split("_")[-1]))
    elif call.data.startswith("mm_main_menu"):
        user = sql_return.find_user_id(call.from_user.id)

        if user and user[3] == "pending":
            bot.edit_message_text("–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", chat_id=call.message.chat.id, message_id=call.message.message_id)
        elif user and user[3] == "approved":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f'mm_send')
            button2 = types.InlineKeyboardButton("üîç –ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f'mm_check_0')
            button3 = types.InlineKeyboardButton("üìÉ –í—Å–µ –∫—É—Ä—Å—ã", callback_data=f'mm_courses_0')
            button4 = types.InlineKeyboardButton("üóÇ –í—Å–µ —Ä–µ—à–µ–Ω–∏—è", callback_data=f"mm_answers_0")
            markup.add(button1)
            markup.add(button2)
            markup.add(button3)
            markup.add(button4)
            bot.edit_message_text(f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.first_name}!""", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
        elif user and user[3] == "banned":
            bot.edit_message_text("–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            bot.edit_message_text(f"""–ó–¥—Ä–∞–≤c—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b> (<u>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</u>)\n\n–ü—Ä–∏–º–µ—Ä: "–ê—Ä—Ç—ë–º –ì—É—Å–µ–≤".""", parse_mode="HTML", chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.register_next_step_handler(call.message, register_name)
    elif call.data.startswith("course_"):
        course_info(call)
    elif call.data.startswith("add_student_"):
        add_student(call)
    elif call.data.startswith("add_developer_"):
        add_developer(call)
    elif call.data.startswith("content_"):
        course_content(call, int(call.data.split('_')[-2]), int(call.data.split("_")[-1]))
    elif call.data.startswith("lesson_"):
        lesson_content(call, int(call.data.split('_')[-3]), int(call.data.split('_')[-2]), int(call.data.split("_")[-1]))
    elif call.data.startswith("task_"):
        task_info(call, int(call.data.split("_")[-3]), int(call.data.split("_")[-2]), int(call.data.split("_")[-1]))
    elif call.data.startswith("send-course_"):
        mm_send_lesson(call=call, course_id=int(call.data.split("_")[-2]), page=int(call.data.split("_")[-1]))
    elif call.data.startswith("send-task_"):
        mm_send_task(call, int(call.data.split("_")[-3]), int(call.data.split("_")[-2]), int(call.data.split("_")[-1]))
    elif call.data.startswith("send-final_"):
        mm_send_final(call, int(call.data.split("_")[-3]), int(call.data.split("_")[-2]), int(call.data.split("_")[-1]))
    elif call.data.startswith("check-course-all_"):
        check_all(call)
    elif call.data.startswith("check-course_"):
        check_course(call, int(call.data.split("_")[-1]))
    elif call.data.startswith("check-add-comment_"):
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–≤–µ–¥–∏—Ç–µ \"None\")")
        bot.register_next_step_handler(call.message, check_add_comment, call, call.data.split("_")[-2], int(call.data.split("_")[-1]))
        # "check-add-comment_{type}_{task_data[0]}"
    elif call.data.startswith("check-final"):
        check_final(call, int(call.data.split("_")[-1]), call.data.split("_")[-2])
        # "check-final_accept_{task_data[0]"
        # "check-final_reject_{task_data[0]}"
    elif call.data.startswith("create_course"):
        create_course(call)
    elif call.data.startswith("create_lesson"):
        create_lesson(call)
    elif call.data.startswith("create_task"):
        create_task(call)
    elif call.data.startswith("solution"):
        solution(call, int(call.data.split("_")[-1]))
    elif call.data.startswith("self_reject"):
        self_reject(call, int(call.data.split("_")[-1]))
    elif call.data.startswith("undo_self_reject"):
        self_reject(call, int(call.data.split("_")[-1]), True)
    else:
        bot.answer_callback_query(call.id, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        bot.send_message(config["admin_id"], f"{call.from_user.id} ({call.from_user.username}; {sql_return.get_user_name(call.from_user.id)[0]} {sql_return.get_user_name(call.from_user.id)[1]}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É: {call.data}")
        sql_return.log_action(call.from_user.id, "unknown_action", f"{call.data}")
    
    bot.answer_callback_query(call.id)

def mm_send(call, page=0):
    user = sql_return.find_user_id(call.from_user.id)

    if not user:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    is_admin = (user[3] == "approved" and str(call.from_user.id) == config["admin_id"])

    all_courses = sql_return.all_courses()

    student_courses = []
    
    for course in all_courses:
        student_ids = course[3] if course[3] else ""
        developer_ids = course[4] if course[4] else ""
        
        if str(call.from_user.id) in student_ids.split():
            student_courses.append(course)

    filtered_courses = student_courses

    courses_per_page = 8
    total_pages = (len(filtered_courses) + courses_per_page - 1) // courses_per_page
    page_courses = filtered_courses[page * courses_per_page:(page + 1) * courses_per_page]

    markup = types.InlineKeyboardMarkup()
    for course in page_courses:
        markup.add(types.InlineKeyboardButton(f"üë®‚Äçüéì {course[1]}", callback_data=f'send-course_{course[0]}_0'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'mm_send_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'mm_send_{page + 1}'))

    markup.row(*navigation)
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm_main_menu"))
    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def mm_send_lesson(call, course_id, page=0):
    user = sql_return.find_user_id(call.from_user.id)

    if not user:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    is_admin = str(call.from_user.id) == config["admin_id"]

    lessons = sql_return.lessons_in_course(course_id)

    if not lessons:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data=f"mm_send"))
        bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.", reply_markup=markup)
        return

    lessons = list(reversed(lessons))  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —É—Ä–æ–∫–∏

    courses_per_page = 8
    total_pages = (len(lessons) + courses_per_page - 1) // courses_per_page
    page_courses = lessons[page * courses_per_page:(page + 1) * courses_per_page]

    description = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è:\n"

    markup = types.InlineKeyboardMarkup()
    for lesson in page_courses:
        markup.add(types.InlineKeyboardButton(f"{lesson[2]}", callback_data=f'send-task_{course_id}_{lesson[0]}_0'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'send-course_{course_id}_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'send-course_{course_id}_{page + 1}'))

    markup.row(*navigation)
    markup.add(types.InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data=f"mm_send"))

    bot.edit_message_text(f"{description}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def mm_send_task(call, course_id, lesson_id, page=0):
    user = sql_return.find_user_id(call.from_user.id)

    if not user:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    is_admin = str(call.from_user.id) == config["admin_id"]

    tasks = sql_return.tasks_in_lesson(lesson_id)  

    courses_per_page = 8
    total_pages = (len(tasks) + courses_per_page - 1) // courses_per_page
    page_courses = tasks[page * courses_per_page:(page + 1) * courses_per_page]

    description = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:\n"

    markup = types.InlineKeyboardMarkup()
    for lesson in page_courses:
        markup.add(types.InlineKeyboardButton(f"{lesson[2]}", callback_data=f'send-final_{lesson_id}_{course_id}_{lesson[0]}'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'send-task_{course_id}_{lesson_id}_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'send-task_{course_id}_{lesson_id}_{page + 1}'))

    markup.row(*navigation)
    markup.add(types.InlineKeyboardButton("üîô –ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫—É—Ä—Å–∞", callback_data=f"send-course_{course_id}_0"))
    try:
        bot.edit_message_text(f"{description}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    except:
        pass

new_student_answer_dict = dict([])

def mm_send_final(call, lesson_id, course_id, task_id):
    task = sql_return.task_info(task_id)
    
    if task:
        task_id, lesson_id, task_title, task_status, task_deadline, task_description = task

        status_translation = {
            'open': '–û—Ç–∫—Ä—ã—Ç',
            'arc': '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω',
            'dev': '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        }
        task_status = status_translation.get(task_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

        if task_deadline:
            deadline_date = datetime.datetime.strptime(task_deadline, '%Y-%m-%d %H:%M:%S')
            current_date = datetime.datetime.now()
            days_left = (deadline_date - current_date).total_seconds() / (60 * 60 * 24)
            if task_status == '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω' or deadline_date < current_date:
                deadline_str = deadline_date.strftime('%d-%m-%Y %H:%M')
                deadline_info = f"üóì <b>–î–µ–¥–ª–∞–π–Ω</b>: {deadline_str}"
            elif days_left < 2:
                deadline_str = deadline_date.strftime('%d-%m-%Y %H:%M')
                deadline_info = f"üî• <b>–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑</b>: {time_left_str} ({deadline_str})"
            else:
                time_left = relativedelta(deadline_date, current_date)
                time_left_str = f"{time_left.days} –¥–Ω–µ–π, {time_left.hours} —á–∞—Å–æ–≤, {time_left.minutes} –º–∏–Ω—É—Ç"
                deadline_str = deadline_date.strftime('%d-%m-%Y %H:%M')
                deadline_info = f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑</b>: {time_left_str} ({deadline_str})"
        else:
            deadline_info = "‚è∞ <b>–î–µ–¥–ª–∞–π–Ω</b>: –ù–µ —É–∫–∞–∑–∞–Ω"

        task_info_message = (f"–í—ã –Ω–∞—á–∞–ª–∏ —Å–¥–∞—á—É —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–π –Ω–∏–∂–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—à–µ–Ω–∏—è \"Stop\".\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é –º–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º 1 —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç / –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ). –ü–æ–¥—Ä–æ–±–Ω–µ–µ - /why_only_one_file\n\n"
                             f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>: {task_title}\n"
                             f"üîñ <b>–°—Ç–∞—Ç—É—Å</b>: {task_status}\n"
                             f"{deadline_info}\n"
                             f"üìù <b>–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏</b>: {task_description if task_description else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏'}")

        bot.edit_message_text(task_info_message, 
                              chat_id=call.message.chat.id, 
                              message_id=call.message.message_id, 
                              parse_mode="HTML")

        bot.register_next_step_handler(call.message, mm_send_final_2, lesson_id, course_id, task_id, call.from_user.id)
        # new_student_answer_dict[call.message.from_user.id] == [lesson_id, course_id, task_id]
    else:
        bot.edit_message_text("‚ùóÔ∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 
                              chat_id=call.message.chat.id, 
                              message_id=call.message.message_id)

last_time_student_answer_dict = {}

def mm_send_final_2(message, lesson_id, course_id, task_id, user_id):
    if user_id not in last_time_student_answer_dict:
        last_time_student_answer_dict[user_id] = time.time()
    else:
        if time.time() - last_time_student_answer_dict[user_id] < 10:
            return
        last_time_student_answer_dict[user_id] = time.time()
    if message.content_type == 'text':
        answer_text = message.text
        if "/why_only_one_file" in answer_text:
            why_only_one_file(message)
            return
        if answer_text == "Stop":
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        sql_return.new_student_answer(task_id, user_id, answer_text)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f'mm_main_menu')
        markup.add(button1)
        bot.send_message(message.chat.id, "–†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", reply_markup=markup)
        for i in sql_return.developers_list(course_id).split():
            bot.send_message(i, f"–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç {sql_return.get_user_name(user_id)[0]} {sql_return.get_user_name(user_id)[1]}")
        sql_return.log_action(user_id, "send_final", f"{task_id}")
    elif message.content_type == 'document' or message.content_type == 'photo':
        answer_text = message.caption
        if answer_text == "Stop":
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        if not os.path.exists('files'):
            os.makedirs('files')
        try:
            file_id = message.document.file_id if message.content_type == 'document' else message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            
            if file_info.file_size > 15 * 1024 * 1024:
                bot.reply_to(message, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 15 –ú–ë.")
                return
            
            downloaded_file = bot.download_file(file_info.file_path)
            
            file_extension = os.path.splitext(file_info.file_path)[1]
            
            new_file_name = f'{sql_return.next_name("files")}{file_extension}'
            save_path = f'files/{new_file_name}'
            
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            sql_return.save_file(message.content_type, new_file_name, save_path, message.from_user.id)

            bot.reply_to(message, f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {new_file_name} (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.caption})")

            sql_return.new_student_answer(task_id, user_id, answer_text, new_file_name)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f'mm_main_menu')
            markup.add(button1)
            bot.send_message(message.chat.id, "–†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", reply_markup=markup)
            for i in sql_return.developers_list(course_id).split():
                bot.send_message(i, f"–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç {sql_return.get_user_name(user_id)[0]} {sql_return.get_user_name(user_id)[1]}")
            sql_return.log_action(user_id, "send_final", f"{task_id}")
        except telebot.apihelper.ApiTelegramException as e:
            if "file is too big" in str(e):
                bot.reply_to(message, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Telegram API.")
            else:
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")

def mm_check(call, page=0):
    user = sql_return.find_user_id(call.from_user.id)

    if not user:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    is_admin = (user[3] == "approved" and str(call.from_user.id) == config["admin_id"])

    all_courses = sql_return.all_courses()

    developer_courses = []
    
    for course in all_courses:
        student_ids = course[3] if course[3] else ""
        developer_ids = course[4] if course[4] else ""
        
        if str(call.from_user.id) in developer_ids.split():
            developer_courses.append(course)

    filtered_courses = developer_courses

    courses_per_page = 8
    total_pages = (len(filtered_courses) + courses_per_page - 1) // courses_per_page
    page_courses = filtered_courses[page * courses_per_page:(page + 1) * courses_per_page]

    markup = types.InlineKeyboardMarkup()
    if page == 0 and total_pages != 0:
        markup.add(types.InlineKeyboardButton(f"üóÇ –í—Å–µ —Ä–µ—à–µ–Ω–∏—è", callback_data=f'check-course-all_'))
    for course in page_courses:
        markup.add(types.InlineKeyboardButton(f"üë®‚Äçüè´ {course[1]} ({sql_return.count_unchecked_solutions(int(course[0]))})", callback_data=f'check-course_{course[0]}'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'mm_check_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'mm_check_{page + 1}'))

    markup.row(*navigation)
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm_main_menu"))
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", reply_markup=markup)

def mm_answers(call, page=0):
    solutions = sql_return.get_accessible_solutions(user_id=call.from_user.id)
    solutions = list(reversed(solutions))

    courses_per_page = 8
    total_pages = (len(solutions) + courses_per_page - 1) // courses_per_page
    page_courses = solutions[page * courses_per_page:(page + 1) * courses_per_page]

    markup = types.InlineKeyboardMarkup()

    for solution in page_courses:
        if solution[2] != call.from_user.id:
            if solution[6] == "accept":
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüè´‚úÖ {solution[0]}", callback_data=f'solution_{solution[0]}'))
            elif solution[6] == "reject":
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüè´‚ùå {solution[0]}", callback_data=f'solution_{solution[0]}'))
            elif solution[6] == "self_reject":
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüè´üíî {solution[0]}", callback_data=f'solution_{solution[0]}'))
            else:
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüè´‚åõÔ∏è {solution[0]}", callback_data=f'solution_{solution[0]}'))
        elif solution[2] == call.from_user.id:
            if solution[6] == "accept":
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüéì‚úÖ {solution[0]}", callback_data=f'solution_{solution[0]}'))
            elif solution[6] == "reject":
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüéì‚ùå {solution[0]}", callback_data=f'solution_{solution[0]}'))
            elif solution[6] == "self_reject":
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüéìüíî {solution[0]}", callback_data=f'solution_{solution[0]}'))
            else:
                markup.add(types.InlineKeyboardButton(f"üë®‚Äçüéì‚åõÔ∏è {solution[0]}", callback_data=f'solution_{solution[0]}'))
        else:
            markup.add(types.InlineKeyboardButton(f"{solution[1]} {solution[0]}", callback_data=f'solution_{solution[0]}'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'mm_answers_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'mm_answers_{page + 1}'))

    markup.row(*navigation)
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm_main_menu"))
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", reply_markup=markup)

def solution(call, sol_id):
    sol = sql_return.get_student_answer_from_id(sol_id)
    print(sol)
    verdicts = {"accept": "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", "reject": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "self_reject": "üíî –û—Ç–º–µ–Ω–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º", None: "‚åõÔ∏è –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"}
    markup = types.InlineKeyboardMarkup()
    if sol[2] == call.from_user.id and sol[6] == None:
        markup.add(types.InlineKeyboardButton("üíî –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"self_reject_{sol[0]}"))
    if sol[2] == call.from_user.id and sol[6] == "self_reject":
        markup.add(types.InlineKeyboardButton("‚ù§Ô∏è‚Äçü©π –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"undo_self_reject_{sol[0]}"))
    markup.add(types.InlineKeyboardButton("üóÇ –í—Å–µ —Ä–µ—à–µ–Ω–∏—è", callback_data="mm_answers_0"))
    student_name = sql_return.get_user_name(sol[2])
    text = f"""–†–µ—à–µ–Ω–∏–µ:
–í–µ—Ä–¥–∏–∫—Ç: {verdicts[sol[6]]}
–û—Ç–ø—Ä–∞–≤–∏–ª {student_name[0]} {student_name[1]}
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {sol[5]}

(—Ç—É—Ç –µ—Å—Ç—å –Ω–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è)

–¢–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è:
{sol[3]}
"""
    bot.delete_message(call.message.chat.id, call.message.message_id)
    
    bot.send_message(call.message.chat.id, text, reply_markup=markup)

def self_reject(call, sol_id, undo=False):
    if undo:
        sql_return.undo_self_reject(sol_id)
    else:
        sql_return.self_reject(sol_id)
    solution(call, sol_id)

def check_all(call):
    task_data = sql_return.last_student_answer_all(call.from_user.id)
    check_task(type=f"check-course-all_", call=call, task_data=task_data)

def check_course(call, course_id):
    task_data = sql_return.last_student_answer_course(course_id)
    check_task(type=f"check-course_{course_id}", call=call, task_data=task_data)

comment_for_answer_dict = dict([])

def check_task(type: str, call, task_data, comment: str = "None"):
    markup = types.InlineKeyboardMarkup()
    if task_data is None:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="mm_check_0"))
        bot.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
        return

    # Create common buttons
    v = [
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"check-final_accept_{task_data['answer_id'] if isinstance(task_data, dict) else task_data[0]}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"check-final_reject_{task_data['answer_id'] if isinstance(task_data, dict) else task_data[0]}")
    ]
    markup.row(*v)

    if isinstance(task_data, dict):
        # Handle dictionary case
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
                  callback_data=f"check-add-comment_{type}_{task_data['answer_id']}"))
        
        task_data_2 = sql_return.get_task_from_id(task_data["task_id"])
        lesson_data = sql_return.get_lesson_from_id(task_data_2[1])
        files_id = task_data["files_id"]
        answer_text = task_data['answer_text']
        student_name = sql_return.get_user_name(task_data['student_id'])
    else:
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
                  callback_data=f"check-add-comment_{type}_{task_data[0]}"))
        task_data_2 = sql_return.get_task_from_id(task_data[1])
        lesson_data = sql_return.get_lesson_from_id(task_data_2[1])
        files_id = task_data[4] if len(task_data) > 4 else None  # Assuming files_id is at index 4
        answer_text = task_data[3]
        student_name = sql_return.get_user_name(task_data[2])

    # Construct message text
    text = f"""<b>–†–µ—à–µ–Ω–∏–µ</b>:
<b>–û—Ç–ø—Ä–∞–≤–∏–ª</b> {student_name[0]} {student_name[1]}
<b>–£—Ä–æ–∫</b>: {lesson_data[2]}
<b>–ó–∞–¥–∞—á–∞</b>: {task_data_2[2]}
<b>–†–µ—à–µ–Ω–∏–µ</b>:
{answer_text}
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–µ—Ä–¥–∏–∫—Ç—É</b>: {comment}"""
    if files_id is None:
        bot.edit_message_text(
            text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        # Delete old message
        bot.delete_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        
        # Send message with file
        file_id = files_id.split()[0]
        file_info = sql_return.get_file(file_id.split(".")[0])
        file_type = file_info[2]
        file_name = file_info[3]
        file_path = file_info[4]
        
        if file_type == 'photo':
            with open(file_path, 'rb') as photo:
                bot.send_photo(
                    call.message.chat.id,
                    photo,
                    caption=text,
                    reply_markup=markup,
                    parse_mode="HTML"
                )
        else:
            with open(file_path, 'rb') as doc:
                bot.send_document(
                    call.message.chat.id,
                    doc,
                    visible_file_name=file_name,
                    caption=text,
                    reply_markup=markup,
                    parse_mode="HTML"
                )

def check_add_comment(message, call, type: str, task_id):
    task_data = sql_return.get_student_answer_from_id(task_id)
    comment = message.text
    comment_for_answer_dict[message.from_user.id] = comment
    check_task(type, call, task_data, comment)

def check_final(call, answer_id: int, verdict: str):
    try:
        comment = comment_for_answer_dict[call.from_user.id]
    except:
        comment = None
    if call.from_user.id in comment_for_answer_dict:
        del comment_for_answer_dict[call.from_user.id]
    if comment == "None":
        comment = None
    sql_return.check_student_answer(verdict, comment, answer_id)
    sa_data = sql_return.get_student_answer_from_id(answer_id)
    if verdict == "accept":
        verdict_message = "‚úÖ –í–µ—Ä–¥–∏–∫—Ç: –≤–µ—Ä–Ω–æ"
    else:
        verdict_message = "‚ùå –í–µ—Ä–¥–∏–∫—Ç: –Ω–µ–≤–µ—Ä–Ω–æ"

    bot.send_message(sa_data[2], f"""ü•≥ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!

üìù –¢–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è:\n{sa_data[3]}
{verdict_message}
üìú –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}""")

    sql_return.log_action(call.from_user.id, "check_final", f"{answer_id}")
    mm_check(call)

def mm_courses(call, page=0):
    user = sql_return.find_user_id(call.from_user.id)

    if not user:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    is_admin = (user[3] == "approved" and str(call.from_user.id) == str(config["admin_id"]))

    all_courses = sql_return.all_courses()

    student_or_developer_courses = []
    other_courses = []
    
    for course in all_courses:
        student_ids = course[3] if course[3] else ""
        developer_ids = course[4] if course[4] else ""
        
        if str(call.from_user.id) in student_ids.split() or str(call.from_user.id) in developer_ids.split():
            student_or_developer_courses.append(course)
        else:
            other_courses.append(course)

    if is_admin:
        filtered_courses = student_or_developer_courses + other_courses
    else:
        filtered_courses = student_or_developer_courses

    courses_per_page = 8
    total_pages = (len(filtered_courses) + courses_per_page - 1) // courses_per_page
    page_courses = filtered_courses[page * courses_per_page:(page + 1) * courses_per_page]

    description = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:\n"
    description += "üë®‚Äçüéì ‚Äî –í—ã —Å—Ç—É–¥–µ–Ω—Ç –∫—É—Ä—Å–∞\n"
    description += "üë®‚Äçüè´ ‚Äî –í—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫—É—Ä—Å–∞\n"
    
    if is_admin:
        description += "üîë ‚Äî –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"

    markup = types.InlineKeyboardMarkup()
    for course in page_courses:
        student_ids = course[3] if course[3] else ""
        developer_ids = course[4] if course[4] else ""

        if str(call.from_user.id) in student_ids.split():
            emoji = "üë®‚Äçüéì" 
        elif str(call.from_user.id) in developer_ids.split():
            emoji = "üë®‚Äçüè´"
        elif is_admin:
            emoji = "üîë"
        else:
            emoji = "üö´"

        markup.add(types.InlineKeyboardButton(f"{emoji} {course[1]}", callback_data=f'course_{course[0]}'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'mm_courses_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'mm_courses_{page + 1}'))

    markup.row(*navigation)
    if page == 0:
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å", callback_data="create_course"))
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm_main_menu"))
    if total_pages > 1:
        bot.edit_message_text(f"{description}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    else:
        bot.edit_message_text(f"{description}\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫—É—Ä—Å–æ–≤", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def course_info(call):
    course_id = int(call.data.split('_')[-1])
    course = sql_return.find_course_id(course_id)

    if not course:
        bot.send_message(call.message.chat.id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    course_name = course[1]
    creator_id = course[2]
    student_ids = course[3] if course[3] else ""
    developer_ids = course[4] if course[4] else ""

    developers = sorting_123.sort([str(dev_id) for dev_id in developer_ids.split()])
    developer_names = []
    for dev_id in developers:
        user = sql_return.get_user_name(int(dev_id))
        if user:
            developer_names.append(f"{user[0]} {user[1]}")
        else:
            developer_names.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {dev_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    students = sorting_123.sort([str(student_id) for student_id in student_ids.split()])
    student_names = []
    for student_id in students:
        user = sql_return.get_user_name(int(student_id))
        if user:
            student_names.append(f"{user[0]} {user[1]}")
        else:
            student_names.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    creator_name = ""
    user = sql_return.get_user_name(int(creator_id))
    if user:
        creator_name = f"{user[0]} {user[1]}"
    else:
        creator_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

    course_info = f"üìö –ö—É—Ä—Å: {course_name}\n\n"
    course_info += f"–°–æ–∑–¥–∞—Ç–µ–ª—å: \n{creator_name}\n\n"
    course_info += "üë®‚Äçüè´ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n" + "\n".join(developer_names) + "\n\n"
    course_info += "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã:\n" + "\n".join(student_names) + "\n"

    is_dev = sql_return.is_course_dev(call.from_user.id, developer_ids)

    markup = types.InlineKeyboardMarkup()
    if int(call.from_user.id) == int(config["admin_id"]) or is_dev:
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data=f'add_student_{course_id}'))
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data=f'add_developer_{course_id}'))
    markup.add(types.InlineKeyboardButton("üìÇ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data=f"content_{course_id}_0"))
    markup.add(types.InlineKeyboardButton("üìÉ –ö –∫—É—Ä—Å–∞–º", callback_data="mm_courses_0"))

    bot.edit_message_text(course_info, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def add_student(call):
    course_id = int(call.data.split('_')[-1])
    bot.reply_to(call.message, "–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    bot.register_next_step_handler(call.message, lambda message: add_student_to_course(message, course_id))

def add_student_to_course(message, course_id):
    try:
        student_id = int(message.text)
        student = sql_return.find_user_id(student_id)

        if not student:
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    
        student_ids = sql_return.students_list(course_id)
        if str(student_id) not in student_ids.split():
            new_student_ids = student_ids + f" {student_id}"
            sql_return.try_add_student_to_course(course_id, new_student_ids.strip())
            bot.reply_to(message, f"–£—á–µ–Ω–∏–∫ {student[1]} {student[2]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å!")
            sql_return.log_action(message.from_user.id, "add_student", f"{course_id} {student_id}")
        else:
            bot.reply_to(message, "–≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—É—Ä—Å–µ.")
        
    except ValueError:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def add_developer(call):
    course_id = int(call.data.split('_')[-1])
    bot.reply_to(call.message, "–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    bot.register_next_step_handler(call.message, lambda message: add_developer_to_course(message, course_id))

def add_developer_to_course(message, course_id):
    try:
        developer_id = int(message.text)
        developer = sql_return.find_user_id(developer_id)

        if not developer:
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        developer_ids = sql_return.developers_list(course_id)
        if str(developer_id) not in developer_ids.split():
            new_developer_ids = developer_ids + f" {developer_id}"
            sql_return.try_add_developer_to_course(course_id, new_developer_ids.strip())
            bot.reply_to(message, f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {developer[1]} {developer[2]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å!")
            sql_return.log_action(message.from_user.id, "add_developer", f"{course_id} {developer_id}")
        else:
            bot.reply_to(message, "–≠—Ç–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—É—Ä—Å–µ.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def course_content(call, course_id, page=0):
    user = sql_return.find_user_id(call.from_user.id)

    if not user:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    is_admin = str(call.from_user.id) == config["admin_id"]

    lessons = sql_return.lessons_in_course(course_id)

    if not lessons:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data=f"course_{course_id}"))
        bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.", reply_markup=markup)
        return

    lessons = list(reversed(lessons))  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —É—Ä–æ–∫–∏

    # all_courses = sql_return.all_courses()

    courses_per_page = 8
    total_pages = (len(lessons) + courses_per_page - 1) // courses_per_page
    page_courses = lessons[page * courses_per_page:(page + 1) * courses_per_page]

    description = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞:\n"

    markup = types.InlineKeyboardMarkup()
    for lesson in page_courses:
        markup.add(types.InlineKeyboardButton(f"{lesson[2]}", callback_data=f'lesson_{course_id}_{lesson[0]}_0'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'content_{course_id}_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'content_{course_id}_{page + 1}'))

    markup.row(*navigation)

    if (is_admin or sql_return.is_course_dev(call.from_user.id, sql_return.developers_list(course_id))) and page == 0:
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫", callback_data=f'create_lesson_{course_id}'))

    markup.add(types.InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data=f"course_{course_id}"))

    bot.edit_message_text(f"{description}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def lesson_content(call, course_id, lesson_id, page=0):
    user = sql_return.find_user_id(call.from_user.id)

    if not user:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    is_admin = str(call.from_user.id) == config["admin_id"]

    tasks = sql_return.tasks_in_lesson(lesson_id)  

    courses_per_page = 8
    total_pages = (len(tasks) + courses_per_page - 1) // courses_per_page
    page_courses = tasks[page * courses_per_page:(page + 1) * courses_per_page]

    description = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:\n"

    markup = types.InlineKeyboardMarkup()
    for lesson in page_courses:
        verdict = sql_return.task_status_by_user(call.from_user.id, lesson[0])
        markup.add(types.InlineKeyboardButton(f"{verdict} {lesson[2]}", callback_data=f'task_{lesson[0]}_{lesson_id}_{course_id}'))

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'lesson_{course_id}_{lesson_id}_{page - 1}'))
    if page < total_pages - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'lesson_{course_id}_{lesson_id}_{page + 1}'))

    if (is_admin or sql_return.is_course_dev(call.from_user.id, sql_return.developers_list(course_id))) and page == 0:
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data=f'create_task_{lesson_id}_{course_id}'))

    markup.row(*navigation)
    markup.add(types.InlineKeyboardButton("üîô –ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫—É—Ä—Å–∞", callback_data=f"content_{course_id}_0"))
    try:
        bot.edit_message_text(f"{description}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    except:
        pass

def task_info(call, task_id, lesson_id, course_id):
    task = sql_return.task_info(task_id)
    
    if task:
        task_id, lesson_id, task_title, task_status, task_deadline, task_description = task

        status_translation = {
            'open': '–û—Ç–∫—Ä—ã—Ç',
            'arc': '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω',
            'dev': '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        }
        task_status = status_translation.get(task_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

        if task_deadline:
            deadline_date = datetime.datetime.strptime(task_deadline, '%Y-%m-%d %H:%M:%S')
            current_date = datetime.datetime.now()
            days_left = (deadline_date - current_date).total_seconds() / (60 * 60 * 24)
            if task_status == '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω' or deadline_date < current_date:
                deadline_str = deadline_date.strftime('%d-%m-%Y %H:%M')
                deadline_info = f"üóì <b>–î–µ–¥–ª–∞–π–Ω</b>: {deadline_str}"
            elif days_left < 2:
                deadline_str = deadline_date.strftime('%d-%m-%Y %H:%M')
                deadline_info = f"üî• <b>–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑</b>: {time_left_str} ({deadline_str})"
            else:
                time_left = relativedelta(deadline_date, current_date)
                time_left_str = f"{time_left.days} –¥–Ω–µ–π, {time_left.hours} —á–∞—Å–æ–≤, {time_left.minutes} –º–∏–Ω—É—Ç"
                deadline_str = deadline_date.strftime('%d-%m-%Y %H:%M')
                deadline_info = f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑</b>: {time_left_str} ({deadline_str})"
        else:
            deadline_info = "‚è∞ <b>–î–µ–¥–ª–∞–π–Ω</b>: –ù–µ —É–∫–∞–∑–∞–Ω"

        task_info_message = (f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>: {task_title}\n"
                             f"üîñ <b>–°—Ç–∞—Ç—É—Å</b>: {task_status}\n"
                             f"{deadline_info}\n"
                             f"üìù <b>–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏</b>: {task_description if task_description else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏'}")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data=f"lesson_{course_id}_{lesson_id}_0"))

        bot.edit_message_text(task_info_message, 
                              chat_id=call.message.chat.id, 
                              message_id=call.message.message_id, 
                              reply_markup=markup, 
                              parse_mode="HTML")
    else:
        bot.edit_message_text("‚ùóÔ∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 
                              chat_id=call.message.chat.id, 
                              message_id=call.message.message_id)

def create_course(call):
    bot.edit_message_text(f"""üéì –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∫—É—Ä—Å.
                          
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ:
üë®‚Äçüè´ –°–æ–∑–¥–∞—Ç–µ–ª—å –∫—É—Ä—Å–∞: {sql_return.get_user_name(call.from_user.id)[0]} {sql_return.get_user_name(call.from_user.id)[1]} ({call.from_user.id})
üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: -
üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: -

‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:""", chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.register_next_step_handler(call.message, create_course_name, call.message.message_id)

def create_course_name(message, editing_message_id):
    name = message.text
    bot.delete_message(message.chat.id, message.message_id)
    bot.edit_message_text(f"""üéì –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∫—É—Ä—Å.
                          
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ: 
üë®‚Äçüè´ –°–æ–∑–¥–∞—Ç–µ–ª—å –∫—É—Ä—Å–∞: {sql_return.get_user_name(message.from_user.id)[0]} {sql_return.get_user_name(message.from_user.id)[1]} ({message.from_user.id})
üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {name}
üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: -

‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ id —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ "cancel" –∏–ª–∏ "none" –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤):""", chat_id=message.chat.id, message_id=editing_message_id)
    bot.register_next_step_handler(message, create_course_developers, editing_message_id, name)

def create_course_developers(message, editing_message_id, course_name):
    developers = message.text.split()
    bot.delete_message(message.chat.id, message.message_id)

    if message.text.lower() == "cancel":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm_main_menu"))
        bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", chat_id=message.chat.id, message_id=editing_message_id, reply_markup=markup)
        return
    
    if message.text.lower() == "none":
        sql_return.create_course(course_name, message.from_user.id, str(message.from_user.id))
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm_main_menu"))
        bot.edit_message_text(f"""‚úÖ –ö—É—Ä—Å "{course_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!""", chat_id=message.chat.id, message_id=editing_message_id, reply_markup=markup)
        return
        
    try:
        developers = [int(dev_id) for dev_id in developers]
    except ValueError:
        bot.edit_message_text("""üéì –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∫—É—Ä—Å.
                          
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ: 
üë®‚Äçüè´ –°–æ–∑–¥–∞—Ç–µ–ª—å –∫—É—Ä—Å–∞: {sql_return.get_user_name(message.from_user.id)[0]} {sql_return.get_user_name(message.from_user.id)[1]} ({message.from_user.id})
üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course_name}
üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: -

‚ùå –û—à–∏–±–∫–∞: ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 987654321)""", chat_id=message.chat.id, message_id=editing_message_id)
        bot.register_next_step_handler(message, create_course_developers, editing_message_id, course_name)
        return
    
    if message.from_user.id not in developers:
        developers.insert(0, message.from_user.id)
    else:
        developers.remove(message.from_user.id)
        developers.insert(0, message.from_user.id)
        
    sql_return.create_course(course_name, message.from_user.id, " ".join(map(str, developers)))
    sql_return.log_action(message.from_user.id, "create_course", f"{sql_return.last_course_id()} {course_name} {message.from_user.id} {developers}")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mm_main_menu"))
    bot.edit_message_text(f"""‚úÖ –ö—É—Ä—Å "{course_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!""", chat_id=message.chat.id, message_id=editing_message_id, reply_markup=markup)

def create_lesson(call):
    bot.edit_message_text(f"""üéì –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ —É—Ä–æ–∫.
                          
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ä–æ–∫–µ:
üìö –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞: -

‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:""", chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.register_next_step_handler(call.message, create_lesson_name, call.message.message_id, call.data.split('_')[-1])

def create_lesson_name(message, editing_message_id, course_id):
    name = message.text
    bot.delete_message(message.chat.id, message.message_id)
    sql_return.create_lesson(course_id, name)
    sql_return.log_action(message.from_user.id, "create_lesson", f"{sql_return.last_lesson_id()} {course_id} {name}")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data=f"content_{course_id}_0"))
    bot.edit_message_text(f"""‚úÖ –£—Ä–æ–∫ "{name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!""", chat_id=message.chat.id, message_id=editing_message_id, reply_markup=markup)

def create_task(call):
    bot.edit_message_text(f"""üéì –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∑–∞–¥–∞—á—É.
                          
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:
üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: -
üìù –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: - 

‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:""", chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.register_next_step_handler(call.message, create_task_name, call.message.message_id, call.data.split('_')[-2], call.data.split('_')[-1])

def create_task_name(message, editing_message_id, lesson_id, course_id):
    task_name = message.text
    bot.delete_message(message.chat.id, message.message_id)
    bot.edit_message_text(f"""üéì –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∑–∞–¥–∞—á—É.
                          
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:
üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_name}
üìù –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: - 

‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:""", chat_id=message.chat.id, message_id=editing_message_id)
    bot.register_next_step_handler(message, create_task_description, editing_message_id, lesson_id, course_id, task_name)

def create_task_description(message, editing_message_id, lesson_id, course_id, task_name):
    task_description = message.text
    bot.delete_message(message.chat.id, message.message_id)
    sql_return.create_task(lesson_id, course_id, task_name, task_description)
    sql_return.log_action(message.from_user.id, "create_task", f"{sql_return.last_task_id()} {lesson_id} {course_id} {task_name} {task_description}")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data=f"lesson_{course_id}_{lesson_id}_0"))
    bot.edit_message_text(f"""‚úÖ –ó–∞–¥–∞—á–∞ "{task_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!""", chat_id=message.chat.id, message_id=editing_message_id, reply_markup=markup)

@bot.message_handler(commands=["support"])
def support(message):
    bot.reply_to(message, f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª—Å —É @agusev2311")

@bot.message_handler(commands=["help"])
def help(message):
    text = """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ –∏ faq:
–ö–æ–º–∞–Ω–¥—ã:
/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

/support - –ø–æ–¥–¥–µ—Ä–∂–∫–∞

/help - —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["why_only_one_file"])
def why_only_one_file(message):
    text = """–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).

–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ:

1. –ï—Å–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –µ–≥–æ –Ω–∞ —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã.

2. –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–∞–º.

–î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–¥–∞—á–∏ —Ä–µ—à–µ–Ω–∏–π. –ú—ã –º–æ–∂–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ –≤ –±—É–¥—É—â–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å –¥–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π.

–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∏ –æ—Ç–∫–∞–∂–µ—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ. –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ. –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤, —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π.

–ï—Å–ª–∏ –ø–æ –≤–∞–∂–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É (aka @agusev2311).

‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç—Ä–µ–±—É–µ—Ç –º–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ), –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –±–µ–∑ –≤–µ—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—é, –∫ –≤–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —É–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–µ–Ω—è.
"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["ban"])
def ban(message):
    if message.from_user.id != config["admin_id"]:
        return
    for user in message.text.split()[1:]:
        sql_return.set_user_status(user, "banned")
    sql_return.log_action(message.from_user.id, "ban", f"{message.text.split()[1:]}")
    bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã")

@bot.message_handler(commands=["unban"])
def unban(message):
    if message.from_user.id != config["admin_id"]:
        return
    for user in message.text.split()[1:]:
        sql_return.set_user_status(user, "approved")
    sql_return.log_action(message.from_user.id, "unban", f"{message.text.split()[1:]}")
    bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã")

@bot.message_handler(commands=["stop"])
def stop(message):
    global is_polling
    if message.from_user.id == config["admin_id"]:
        broadcast("‚ùå –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.")
        is_polling = False
        bot.stop_polling()

def broadcast(message: str):
    for i in sql_return.all_users():
        try:
            bot.send_message(i[0], message)
        except:
            pass

def infinite_update():
    print("infinite_update started")
    while True:
        try:
            prog.update_sheet()
        except Exception as e:
            try:
                bot.send_message(config["admin_id"], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ infinite_update: {str(e)}")
            except:
                pass
            sql_return.bug_report(str(e))
        time.sleep(60 * 3)

update_thread = Thread(target=infinite_update)
update_thread.start()

while is_polling:
    print("polling started")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        sql_return.bug_report(str(e))
        try:
            bot.send_message(config["admin_id"], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        except:
            print(f"report error")
        print(f"polling error: {str(e)}")