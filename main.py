import telebot
from telebot import types
import sqlite3
import time

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        status TEXT
    )
''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫—É—Ä—Å–æ–≤
cursor.execute('''
    CREATE TABLE IF NOT EXISTS courses (
        course_id INTEGER PRIMARY KEY AUTOINCREMENT,
        course_name TEXT,
        creator_id INTEGER,
        developers TEXT
    )
''')
conn.commit()

config = dict([])
for i in open("config", "r").readlines():
    config[i.split(" = ")[0]] = i.split(" = ")[1].split("\n")[0]
print(config)

bot = telebot.TeleBot(config["tg-token"])

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()

    if user and user[3] == "pending":
        bot.reply_to(message, "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif user and user[3] == "approved":
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f'mm_send')
        button2 = types.InlineKeyboardButton("üîç –ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f'mm_check')
        button3 = types.InlineKeyboardButton("üìÉ –í—Å–µ –∫—É—Ä—Å—ã", callback_data=f'mm_courses')
        markup.add(button1)
        markup.add(button2)
        markup.add(button3)
        bot.reply_to(message, f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!""", reply_markup=markup)
    elif user and user[3] == "banned":
        bot.reply_to(message, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    else:
        bot.reply_to(message, f"""–ó–¥—Ä–∞–≤c—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b> (<u>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</u>)\n\n–ü—Ä–∏–º–µ—Ä: "–ê—Ä—Ç—ë–º –ì—É—Å–µ–≤".""", parse_mode="HTML")
        bot.register_next_step_handler(message, register_name)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_name(message):
    name = message.text.split()
    if len(name) != 2:
        bot.reply_to(message, f"–í—ã –≤–≤–µ–ª–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∏—Ö —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, register_name)
    else:
        cursor.execute("INSERT INTO users (user_id, first_name, last_name, status) VALUES (?, ?, ?, ?)",
                    (int(message.from_user.id), name[0], name[1], 'pending'))
        conn.commit()

        bot.reply_to(message, "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'reg_approve_{message.from_user.id}')
        button2 = types.InlineKeyboardButton("üü° –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reg_deny_{message.from_user.id}')
        button3 = types.InlineKeyboardButton("‚ùå –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f'reg_ban_{message.from_user.id}')
        markup.add(button1)
        markup.add(button2, button3)
        bot.send_message(int(config["admin_id"]), f"@{message.from_user.username} ({message.from_user.id}) —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ {name[0]} {name[1]}", reply_markup=markup)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±–µ–∫–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    user_id = call.data.split('_')[-1]

    if call.data.startswith("reg_approve_"):
        cursor.execute("UPDATE users SET status='approved' WHERE user_id=?", (user_id,))
        conn.commit()
        bot.send_message(user_id, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ /start")
    elif call.data.startswith("reg_deny_"):
        cursor.execute("DELETE FROM users WHERE user_id=?", (user_id,))
        conn.commit()
        bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞.")
    elif call.data.startswith("reg_ban_"):
        cursor.execute("UPDATE users SET status='banned' WHERE user_id=?", (user_id,))
        conn.commit()
        bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    bot.delete_message(call.message.chat.id, call.message.message_id)

cre_courses = dict([])

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞
@bot.message_handler(commands=["create_course"])
def create_course(message):
    bot.reply_to(message, f"""–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞. –ß—Ç–æ–±—ã –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ "stop".
–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫—É—Ä—Å–∞.
–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏—Ö id. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ id —á–µ–ª–æ–≤–µ–∫–∞ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É @userinfobot –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
–£–∫–∞–∑—ã–≤–∞–π—Ç–µ id —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: "1234567 7654321 9876")
–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏–∫–æ–≥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "none"
–ï—Å–ª–∏ –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–¥–∏—Ç–µ –∫—É—Ä—Å, —Ç–æ –æ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç–µ.""")
    bot.register_next_step_handler(message, create_course_users)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫—É—Ä—Å–∞
def create_course_users(message):
    if message.text == "stop":
        bot.reply_to(message, f"–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    elif message.text != "none":
        users_id = [str(message.from_user.id)].append(message.text.split())

        try:            
            added = ""
            for i in users_id:
                int(i)

            conn = sqlite3.connect("users.db", check_same_thread=False)
            cursor = conn.cursor()
            
            for i in users_id:
                cursor.execute('SELECT COUNT(*) FROM users WHERE user_id = ?', (int(i), ))
                count = cursor.fetchone()[0]
                if count == 0:
                    added += f"{i} –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n"
                elif count == 1:
                    cursor.execute('SELECT * FROM users WHERE user_id = ?', (int(i), ))
                    user_info = cursor.fetchone()
                    added += f"{user_info[1]} {user_info[2]} (id: {user_info[0]}, status: {user_info[3]})\n"
                else:
                    bot.send_message(config["admin_id"], f"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–ß–µ–ª–æ–≤–µ–∫ –ø–æ–¥ ID {i} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑! –û–±—Ä–∞—Ç–∏—Ç–µ –Ω–∞ —ç—Ç–æ –≤–Ω–∏–º–∞–Ω–∏–µ!")
                    added += f"{i} –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ. –≠—Ç–æ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ú—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            conn.close()
            bot.register_next_step_handler(message, create_course_name)
            bot.reply_to(message, f"""–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π: \n\n{added}\n–ï—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª—é–¥–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ stop.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä "–ú–∞—Ç–ø—Ä–∞–∫ 7–°".""")
            cre_courses[message.from_user.id] = [users_id]
        except:
            bot.reply_to(message, f"–í—ã –Ω–µ–ø—Ä–∞–≤–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ id. –í–≤–µ–¥–∏—Ç–µ –∏—Ö —Å–Ω–æ–≤—ã (–≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å stop –∏–ª–∏ none)")
            bot.register_next_step_handler(message, create_course_users)
    else:
        cre_courses[message.from_user.id] = [[message.from_user.id]]
        bot.reply_to(message, f"""–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä "–ú–∞—Ç–ø—Ä–∞–∫ 7–°".""")
        bot.register_next_step_handler(message, create_course_name)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
def create_course_name(message):
    if message.text == "stop":
        bot.reply_to(message, f"–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    cre_cur_name = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if message.from_user.id not in cre_courses:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤ –ë–î
    cursor.execute("INSERT INTO courses (course_name, creator_id, developers) VALUES (?, ?, ?)",
            (cre_cur_name, message.from_user.id, " ".join([str(i) for i in cre_courses[message.from_user.id][0]])))
    conn.commit()
    
    bot.reply_to(message, f"""–ö—É—Ä—Å "{cre_cur_name}" —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!""")
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ
    del cre_courses[message.from_user.id]

@bot.message_handler(commands=["support"])
def support(message):
    bot.reply_to(message, f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª—Å —É @agusev2311")

bot.polling(none_stop=True)
